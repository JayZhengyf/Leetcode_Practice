// 第一题 哈希解法 C语言
struct hashTable {
	int key;
	int val;
	UT_hash_handle hh;
};

struct hashTable* hashtable;

struct hashTable* find(int ikey) {
	struct hashTable *tmp;
	HASH_FIND_INT(hashtable, &ikey, tmp);
	return tmp;
}

void insert(int ikey, int ival) {
	struct hashTable* it = find(ikey);
	if(it = NULL) {
		struct hashTable *tmp = malloc(sizeof(struct hashTable));
		tmp->key = ikey;
		tmp->val = ival;
		HASH_ADD_INT(hashtable, key, tmp);
	}
	else {
		it->val = ival;
	}
}

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
	hashtable = NULL;
	for (int i = 0; i < numsSize; i++) {
		struct hashTable* it = find(target - nums[i]);
		if (it != NULL) {
			int* ret = malloc(sizeof(int) * 2)
			ret[0] = it->val;
			ret[1] = i;
			*returnSize = 2;
			return ret;
		}
		// 数值是key,数值在数组中的位置是val
		insert(nums[i], i);
	}
	*returnSize = 0;
	return NULL;
}

//第二题 C语言

struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
	struct ListNode *head = NULL, *tail = NULL;
	int carry = 0;
	
	while (l1 || l2) {
		// 如果l1不为空则将l1->value赋值给n1,否则给n1赋0
		int n1 = l1 ? l1->val: 0;
		int n2 = l2 ? l2->val: 0;
		int sum = n1 + n2 + carry;
		
		if (!head) {
			// 初始化，第一次
			head = tail = malloc(sizeof(struct ListNode));
			tail->val = sum % 10;
			tail->next = NULL;
		}
		else {
			tail->next = malloc(sizeof(struct ListNode));
			tail->next->val = sum % 10;
			tail->next->next = NULL;
			tail = tail->next;
		}
		if (l1) {
			l1 = l1->next;
		}
		if (l2) {
			l2 = l2->next;
		}
		carry = sum / 10;
	}
	// 处理最后一位进位的情况
	if (carry > 0) {
		tail->next = malloc(sizeof(struct ListNode));
		tail->next->val = carry;
		tail->next->next = NULL;
		tail = tail->next;
	}
	return head;
}


# 第三题（滑动窗口法）python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # 哈希集合，记录出现过的字符
        occ = set()
        n = len(s)
        # 右指针，初始值为-1，表示还未开始
        rk = -1
        # 最大字子符串长度
        ans = 0
        for i in range(n):
            # 左指针向右移动
            if i != 0:
                occ.remove(s[i - 1])
            
            # 控制右指针不出界并且确保当前右指针指向的字符不在occ集合中
            while rk + 1 < n and s[rk + 1] not in occ:
                # 将当前字符加入到occ集合中
                occ.add(s[rk + 1])
                # 右指针不断地向右移动
                rk += 1
            # 将最长的子字符串的长度记录下来
            # (rk - i + 1)是从左指针i到右指针rk的无重复子字符串的长度
            # ans是到目前为止，最长的子字符串的长度
            ans = max(ans, rk - i + 1)
        return ans
		

#第五题 最长回文子串_动态规划 python
class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        # 当长度为1时，字符串s就是回文串
        if n < 2:
            return s
        
        # 初始化最大长度为1，起始位置为0
        # 最后利用这两个变量在字符串中截取目标子串，达到降低开销的作用
        max_len = 1
        begin = 0
        # 用一个二维布尔数组来表示从i到j是否可达
        # dp[i][j]的True或False表示在字符串s中从i到j是否为回文串
        dp = [[False] * n for _ in range(n)]
        for i in range(n):
            dp[i][i] = True
        
        # 开始递推
        # L表示字符串长度，i表示左指针，j表示右指针
        # 长度从2开始，最大为n
        for L in range(2, n+1):
            
            for i in range(n):
                # 由L和i可以确定右指针，j-i+1=L
                j = L + i - 1
                # 当右指针越界时，退出循环
                if j >= n:
                    break
                
                # s[i]不等于s[j]，则一定有dp[i][j]==False
                if s[i] != s[j]:
                    dp[i][j] = False
                # s[i]等于s[j]，分情况讨论
                else:
                    # j-i为从i到j的距离
                    # j-i为0表示是一个字符的子串
                    # j-i为1表示是两个字符的子串
                    # j-i为2表示是三个字符的子串
                    # 以上三种情况，无论哪种，当s[i]等于s[j]时，该子串都显然是回文串
                    if j-i < 3:
                        dp[i][j] = True
                    # 若不是上述情况，当s[i]等于s[j]时
                    # dp[i][j]为True还是False取决于dp[i+1][j-1]
                    else:
                        dp[i][j] = dp[i + 1][j - 1]
                    
                # 只要dp[i][j]==True成立，就表示s[i...j]是回文串
                # 此时记录回文长度和起始位置
                # 当dp[i][j]==True且(j-i+1)大于当前最大子串长度时，更新数据
                if dp[i][j] and j - i + 1 > max_len:
                    max_len = j - i + 1
                    begin = i
                
        return s[begin:begin + max_len]
        
        
# 第五题 最长回文子串_中心扩展算法 python
class Solution:
    # 定义中心扩展的方法
    def expandAroundCenter(self, s, left, right):
        # 左指针left扩展不能小于0，右指针right扩展不能大于len(s)
        while left >= 0 and right < len(s) and s[left] == s[right]:
            # 左指针向左扩展，右指针向右扩展
            left -= 1
            right += 1
        # 退出循环时，一定是循环条件有不满足，则返回上一步的值
        return left + 1, right - 1
    def longestPalindrome(self, s: str) -> str:
        start, end = 0, 0
        # 从临界状态（长度为1或2）进行扩展
        for i in range(len(s)):
            # 对长度为1的子串进行扩展
            left1, right1 = self.expandAroundCenter(s, i, i)
            # 对长度为2的子串进行扩展
            left2, right2 = self.expandAroundCenter(s, i, i + 1)
            
            # 更新start和end
            if right1 - left1 > end - start:
                start, end = left1, right1
            if right2 - left2 > end - start:
                start, end = left2, right2
        return s[start: end + 1]
            
# 第八题 字符串转换整数 python
INT_MAX= 2 ** 31 -1
INT_MIN = -2 ** 31

class Automaton:
    def __init__(self):
        self.state = 'start'
        self.ans = 0
        self.sign = 1
        self.table = {
            'start': ['start', 'signed', 'in_number', 'end'],
            'signed': ['end', 'end', 'in_number', 'end'],
            'in_number': ['end', 'end', 'in_number', 'end'],
            'end': ['end', 'end', 'end', 'end']
        }
    
    # 从table表中获取状态
    def get_col(self, c):
        if c.isspace(): 
            return 0
        elif c == '+' or c == '-':
            return 1
        elif c.isdigit():
            return 2
        return 3
        
    def get(self, c):
        # 根据前一个状态以及字符自身，得到该字符的状态
        self.state = self.table[self.state][self.get_col(c)]
        if self.state == 'in_number':
            self.ans = self.ans * 10 + int(c)
            self.ans = min(self.ans, INT_MAX) if self.sign == 1 else min(self.ans, -INT_MIN)
        if self.state == 'signed':
            self.sign = 1 if c == '+' else -1
        
class Solution:
    def myAtoi(self, str: str) -> int:
        automaton = Automaton()
        for c in str:
            automaton.get(c)
        return automaton.sign * automaton.ans
            
            
            
// 第六题 Z字形变换_按行排序法 Java
class Solution {
	public String convert(String s, int numRows) {
		
		if (numRows == 1) return s;
		
		List<StringBuilder> rows = new ArrayList<>();
		// 初始化min(len(s), numRows)行的列表
		for (int i = 0; i < Math.min(s.length(), numRows); i++) {
			rows.add(new StringBuilder());
		}
		
		int curRow = 0;
		// 控制循环方向
		boolean goDown = false;
		
		// 从上向下，从下到上进行循环放入
		for (char c: s.toCharArray()) {
			rows.get(curRow).append(c);
			if (curRow == 0 || curRow == numRows - 1) goDown = !goDown;
			curRow += goDown ? 1 : -1;
		}
		
		StringBuilder ret = new StringBuilder();
		for (StringBuilder row : rows) ret.append(row);
		return ret.toString();
	}
	
}

// 第十一题 盛最多水的容器_双指针法 Java
// 双指针解法的正确性证明见网页
// https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/
public class Solution {
	public int maxArea(int[] height) {
		// 左右指针
		int le = 0, r = height.length - 1;
		// 返回值ans
		int ans = 0;
		// 当左指针大于右指针时，结束循环
		while (le < r) {
			// 计算当前左右指针指向的边界形成的容器的面积
			int area = Math.min(height[le], height[r]) * (r - 1);
			// 刷新ans，记录当前最大值
			ans = Math.max(ans, area);
			//如果左指针指向的边界的值小于右指针的，左指针向右移动
			if (height[le] <= height[r]) {
				le++;
			}
			// 如果右指针指向的边界的值小于左指针的，右指针向左移动
			else {
				r--;
			}
			
		}
		return ans;
	}
}

// 第十五题 三数之和 Java
class Solution {
	public List<List<Integer>> threeSum(int[] nums) {
		int n = nums.length;
		Arrays.sort(nums);
		List<List<Integer>> ans = new ArrayList<List<Integer>>();
		// 枚举a
		for (int first = 0; first < n; first++) {
			// 需要和上一次枚举的数不相同
			if (first > 0 && nums[first] == nums[first - 1]) {
				continue;
			}
			
			// c对应的指针初始指向数组的最右端
			int third = n - 1;
			// a+b+c=0,则至少有一个数为负数，至多两个数为负数
			// 因为有序，所以a一定为负数
			int target = -nums[first];
			
			// 枚举b
			for (int second = first + 1; second < n; second++) {
				// 需要和上一次枚举的数不相同
				if (second > first + 1 && nums[second] == nums[second - 1]) {
					continue;
				}
				
				// 需要保证b的指针在c的左边
				while (second < third && nums[second] + nums[third] > target) {
					third--;
				}
				
				// 如果指针重合，随着b的增加
				// a+b+c=0且b<c就不会满足，此时退出循环
				if (second == third) {
					break;
				}
				
				if (nums[second] + nums[third] == target) {
					List<Integer> list = new ArrayList<Integer>();
					list.add(nums[first]);
					list.add(nums[second]);
					list.add(nums[third]);
					ans.add(list);
				}
			}
		}
		return ans;	
	}
}

// 第十七题 电话号码的数字组合 回溯法 C
char phoneMap[11][5] = {
	"\0", "\0", "abc\0","def\0", "ghi\0", "jkl\0", "mno\0", "pqrs\0", "tuv\0", "wxyz\0"
};

// 存储数字的一维数组
char* digits_tmp;
// 数字长度
int digits_size;

// 存储数字对应的所有字母组合
// 二维数组
// combinations中嵌套combination
char** combinations;
int combinations_size;

// 存储一种字母组合
// 一维数组
char* combination;
int combination_size;

void backtrack(int index) {
	if(index == digits_size) {
		char* tmp = malloc(sizeof(char) * (combination_size + 1));
		// // 从存储区combination复制sizeof...个字符到tmp
		memcpy(tmp, combination, sizeof(char) * (combination_size + 1));
		combinations[combination_sizes++] = tmp
	} else {
		char digit = digits_tmp[index];
		// 从phoneMap中提取数字对应的字符串
		// 得到的是一个一维数组
		char* letters = phoneMap[digit - '0'];
		int len = strlen(letters);
		
		for (int i = 0; i < len; i++) {
			combination[combination_size++] = letters[i];
			combination[combination_size] = 0;
			backtrack(index + 1);
			combination[combination_size--] = 0;
		}
	}
}

char** letterCombinations(char* digits, int* returnSize) {
	combination_size = combinations_size = 0;
	digits_tmp = digits;
	digits_size = strlen(digits);
	
	if (digits_size == 0) {
		*returnSize = 0;
		return combinations;
	}
	int num = 1;
	
	// 计算所有可能情况
	// 一位数字最多对应四个字母
	// 4 * digits_size即，可能最大的情况
	for (int i = 0; i < digits_size; i++) num *= 4;
	combinations = malloc(sizeof(char*) * num);
	combination = malloc(sizeof(char*) * digits_size);
	// 开始回溯
	backtrack(0);
	*returnSize = combination_size;
	return combinations;
}